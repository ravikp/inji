xcode_select '/Applications/Xcode_14.2.app'

default_platform(:ios)
APP_STORE_CONNECT_TEAM_ID = ENV["APP_STORE_CONNECT_TEAM_ID"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["INJI_IOS_DEVELOPER_APP_IDENTIFIER"]
TEAM_ID = ENV["INJI_IOS_DEVELOPER_PORTAL_TEAM_ID"]
FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = ENV["INJI_IOS_FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]
FASTLANE_USER= ENV["IOS_FASTLANE_APPLE_ID"]
PROVISIONING_PROFILE_SPECIFIER = ENV["INJI_IOS_PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["INJI_IOS_TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["INJI_IOS_TEMP_KEYCHAIN_PASSWORD"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
SLACK_URL = ENV["SLACK_URL"]
MATCH_PASSWORD = ENV["MATCH_PASSWORD"]
FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT = "120"
TESTFLIGHT_INTERNAL_TESTERS_GROUP = ENV["TESTFLIGHT_INTERNAL_TESTERS_GROUP"] 
TESTFLIGHT_BETA_APP_DESCRIPTION = ENV["TESTFLIGHT_BETA_APP_DESCRIPTION"] 
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 3600
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end
  

platform :ios do

  lane :beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: "#{APPLE_KEY_ID}",
      issuer_id: "#{APPLE_ISSUER_ID}",
      key_content: "#{APPLE_KEY_CONTENT}",            
      duration: 1200,            
      in_house: false,
      is_key_content_base64: true
    )

    version = get_version_number(xcodeproj: "Inji.xcodeproj")

    previous_build_number = latest_testflight_build_number(
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      api_key: api_key,
      version: version
    )

    current_build_number = previous_build_number + 1

    increment_build_number(
      xcodeproj: "Inji.xcodeproj", 
      build_number: current_build_number
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64("#{GIT_AUTHORIZATION}"),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    profile_mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]

    gym(
      configuration: "Release",
      workspace: "Inji.xcworkspace",
      scheme: "Inji",
      export_method: "app-store",
      
      export_options: {
        provisioningProfiles: { 
            "#{DEVELOPER_APP_ID}" => "#{PROVISIONING_PROFILE_SPECIFIER}"
        }
      }
    )

    pilot(
       app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
       api_key: api_key,
       ipa: "./Inji.ipa",
       changelog: "#{TESTFLIGHT_BETA_APP_DESCRIPTION}",
       localized_build_info: {
          "default": {
            whats_new: "#{TESTFLIGHT_BETA_APP_DESCRIPTION}", 
          }
      },
       skip_waiting_for_build_processing: false,
       distribute_external: true,
       submit_beta_review: false,  
       groups: ["#{TESTFLIGHT_INTERNAL_TESTERS_GROUP}"],
    )

    delete_temp_keychain(keychain_name)

    slack(
      message: "Inji - #{version} (#{current_build_number}) is uploaded to testflight.", 
      success: true,
      slack_url: "#{SLACK_URL}",
      default_payloads: [:git_branch, :last_git_commit]
    )
  end

  lane :build_verify do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: "#{APPLE_KEY_ID}",
      issuer_id: "#{APPLE_ISSUER_ID}",
      key_content: "#{APPLE_KEY_CONTENT}",   
      duration: 1200,
      in_house: false,
      is_key_content_base64: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64("#{GIT_AUTHORIZATION}"),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "Inji.xcworkspace",
      scheme: "Inji",
      export_method: "app-store",
    )

    delete_temp_keychain(keychain_name)

  end
  
  lane :build_app_for_automation_on_simulator do

    custom_output_directory = "./Inji_app_file"
    sh("mkdir -p '#{custom_output_directory}'")

    archive_path = gym(
    skip_package_ipa: true,
    destination: "generic/platform=iOS Simulator",
    configuration: "Release",
    build_path: "./build",
    )

    find_command = "find '../build/' -type d -name 'Products'"
    app_path = sh(find_command, log: false).strip
    sh("cp -R '#{app_path}' '#{custom_output_directory}'")
   end
end