name: Inji Android build

env:
  backendServiceDefaultUrl: https://api.qa-121.mosip.net/residentmobileapp
  
on:
  workflow_dispatch:
    inputs:
      backendServiceUrl:
        description: 'Backend service URL'
        required: true
        default: 'https://api.qa-121.mosip.net/residentmobileapp'
        type: string
      theme:
        description: 'Application Theme'
        required: true
        default: 'orange'
        type: choice
        options:
          - orange
          - purple
  push:
    branches:
      - CI-publish
      - develop # specify the branch and use filters if needed -> 'release-**' - pattern -> 'releases/**'
      - 'release/**' #-> release/1, release/01
    tags: # Sequence of patterns matched against refs/tags
      - '*'     #all tags 
     # - v2
     # - v1.* -> v1.9.1 , v1.23.4 

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Install npm 
        run: |
          npm install
      
      - name: Cache local npm repository
        uses: actions/cache@v3.0.11
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm

      - name: Cache local gradle repository
        uses: actions/cache@v3.0.11
        with:
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper

      - name: Create .env.local file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env.local > android/local.properties

      - name: Setup branch and env
        run: |
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV   

      - name: Setup branch and GPG public key
        run: |
          sudo apt-get --yes install gnupg2
          gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
          gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg

      - name: Setup Firebase
        run: |
          cd android
          if [ ! -z "$FIREBASE_SECRET" ] && [ -f app/google-services.json.gpg ];then rm -f app/google-services.json;gpg2 --quiet --batch --passphrase=$FIREBASE_SECRET --pinentry-mode loopback --decrypt --output app/google-services.json app/mosip-google-services.json.gpg;fi
        env:
          FIREBASE_SECRET: ${{ secrets.GPG_SECRET }}

      - name: Generate keystore
        run: |
          keytool \
          -genkey -v \
          -storetype PKCS12 \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -storepass '${{ secrets.INJI_ANDROID_RELEASE_STOREPASS }}' \
          -keypass '${{ secrets.INJI_ANDROID_RELEASE_STOREPASS }}' \
          -alias androidreleasekey \
          -keystore android/app/release.keystore \
          -dname "CN=io.mosip.residentapp,OU=,O=,L=,S=,C=US"

      - name: Export variables for keystore
        run: |
          cd android/app
          ls
          export  RELEASE_KEYSTORE=release.keystore
          export RELEASE_KEYSTORE_ALIAS=androidreleasekey
          export RELEASE_KEYSTORE_PASSWORD='${{ secrets.INJI_ANDROID_RELEASE_STOREPASS }}'
          echo $RELEASE_KEYSTORE
          echo $RELEASE_KEYSTORE_ALIAS
          echo $RELEASE_KEYSTORE_PASSWORD

      # - name: Setup Firebase 
      #   run: |
      #     gpg2 --import ./.github/keys/public_key.gpg
      #     gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/secret_key.gpg
      #     cd android
      #     if [ ! -z "$FIREBASE_SECRET" ] && [ -f app/google-services.json.gpg ];then rm -f app/google-services.json;gpg2 --quiet --batch --passphrase=$FIREBASE_SECRET --pinentry-mode loopback --decrypt --output app/google-services.json app/mosip-google-services.json.gpg;fi
      #   env:
      #     MIMOTO_HOST: ${{ github.event.inputs.backendServiceUrl }}
      #     FIREBASE_SECRET: ${{ secrets.GPG_SECRET }}
      #     APPLICATION_THEME: ${{ github.event.inputs.theme }}

      - name: Run Fastlane
        run: | 
          cd android
          yes | sudo gem install bundler
          yes | sudo fastlane install_plugins
          fastlane build_android
      
      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v3.1.1
      #   with:
      #     name: apk-output
      #     path: android/app/build/outputs/apk/newlogic/debug/
      #     retention-days: 10
